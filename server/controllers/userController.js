const User = require("../models/User.js");
const JwtProvider = require("../provider/JwtProvider");
const bcrypt = require('bcrypt');


// üìå ƒêƒÉng k√Ω v·ªõi s·ªë ƒëi·ªán tho·∫°i & G·ª≠i OTP
exports.register = async (req, res) => {
  try {
    const { username, email, password } = req.body;
    if (!username || !email || !password) {
      return res.status(400).json({
        error: "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng, email v√† m·∫≠t kh·∫©u."
      });
    }

    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({ error: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      username: username,
      email: email,
      password: hashedPassword,
    });
    await newUser.save();

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      userId: newUser._id,
      username: newUser.username
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üìå X√°c nh·∫≠n OTP & Ho√†n t·∫•t ƒëƒÉng k√Ω
exports.verifyOTP = async (req, res) => {
  try {
    const { phone, otp } = req.body;
    if (!phone || !otp) {
      return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i v√† OTP." });
    }

    const otpData = req.app.locals.otpStorage?.[phone];

    // Ki·ªÉm tra OTP h·ª£p l·ªá
    if (!otpData || otpData.otp !== parseInt(otp)) {
      return res.status(400).json({ error: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
    }

    // T·∫°o user m·ªõi v·ªõi username
    const newUser = new User({
      username: otpData.username,
      phone,
      password: otpData.password
    });
    await newUser.save();

    // X√≥a OTP sau khi x√°c nh·∫≠n
    delete req.app.locals.otpStorage[phone];

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      userId: newUser._id,
      username: newUser.username
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üîê ƒêƒÉng nh·∫≠p v·ªõi email & m·∫≠t kh·∫©u
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u." });
    }

    const user = await User.findOne({ email });
    // Ki·ªÉm tra user t·ªìn t·∫°i
    if (!user) {
      return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u." }); // ƒê√£ s·ª≠a th√¥ng b√°o
    }

    // So s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u." });
    }

    // T·∫°o access token
    const token = await JwtProvider.generateToken(
      { userId: user._id },
      process.env.ACCESS_TOKEN_SECRET_KEY,
      "24h"
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      userId: user._id,
      username: user.username,
      avatar: user.avatar
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ error: error.message });
  }
};


// üë§ Xem th√¥ng tin c√° nh√¢n
exports.getProfile = async (req, res) => {
  try {
    console.log("üîç Request params:", req.params);
    console.log("üîë User t·ª´ token:", req.userId);

    if (!req.userId) {
      return res.status(401).json({ error: "Unauthorized: Kh√¥ng c√≥ th√¥ng tin user t·ª´ token." });
    }

    // N·∫øu `/users/me`, l·∫•y userId t·ª´ token
    const userId = req.params.id === "me" ? req.userId : req.params.id;

    if (!userId) {
      return res.status(400).json({ error: "Kh√¥ng t√¨m th·∫•y userId h·ª£p l·ªá." });
    }

    const user = await User.findById(userId).select("-password");

    if (!user) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    res.json({ status: "success", data: user });
  } catch (error) {
    console.error("üö® L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng." });
  }
};




// ‚ûï Theo d√µi ng∆∞·ªùi d√πng
exports.followUser = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    const targetUser = await User.findById(req.params.id);
    if (!user || !targetUser) return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    await user.follow(targetUser._id);
    await targetUser.followers.push(user._id);
    await targetUser.save();

    res.json({ message: `B·∫°n ƒë√£ theo d√µi ${targetUser.username}` });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// ‚ûñ B·ªè theo d√µi ng∆∞·ªùi d√πng
exports.unfollowUser = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    const targetUser = await User.findById(req.params.id);
    if (!user || !targetUser) return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    await user.unfollow(targetUser._id);
    await targetUser.followers.pull(user._id);
    await targetUser.save();

    res.json({ message: `B·∫°n ƒë√£ b·ªè theo d√µi ${targetUser.username}` });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
