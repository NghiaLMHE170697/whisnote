require('dotenv').config();
const nodemailer = require('nodemailer');
const cron = require('node-cron');
// C·∫•u h√¨nh transporter cho nodemailer
const createTransporter = () => {
    return nodemailer.createTransport({
        service: 'gmail',  // Ho·∫∑c service kh√°c nh∆∞ 'outlook', 'yahoo', v.v.
        auth: {
            user: process.env.EMAIL,
            pass: process.env.EMAIL_PASS
        }
    });
};
// H√†m g·ª≠i email nh·∫Øc nh·ªü
const sendJournalReminder = async () => {
    try {
        const transporter = createTransporter();
        const today = new Date();
        const dateStr = today.toLocaleDateString('vi-VN');

        const mailOptions = {
            from: `"WhisNote" <${process.env.EMAIL}>`,
            to: process.env.RECIPIENT_EMAIL,
            subject: `WhisNote - Nh·∫Øc nh·ªü vi·∫øt nh·∫≠t k√Ω ng√†y ${dateStr}`,
            html: `
        <h2>WhisNote - ƒê√£ ƒë·∫øn gi·ªù vi·∫øt nh·∫≠t k√Ω!</h2>
        <p>Xin ch√†o,</p>
        <p>ƒê√¢y l√† l·ªùi nh·∫Øc nh·ªü ƒë·ªÉ b·∫°n vi·∫øt nh·∫≠t k√Ω cho ng√†y ${dateStr}.</p>
        <p>H√£y d√†nh v√†i ph√∫t ƒë·ªÉ ghi l·∫°i nh·ªØng suy nghƒ©, c·∫£m x√∫c v√† s·ª± ki·ªán quan tr·ªçng trong ng√†y h√¥m nay.</p>
        <p>Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!</p>
        <p><em>WhisNote - N∆°i l∆∞u gi·ªØ nh·ªØng kho·∫£nh kh·∫Øc c·ªßa b·∫°n</em></p>
        <p>https://whisnote-client.vercel.app/</p>
      `
        };
        const info = await transporter.sendMail(mailOptions);
        console.log('‚úÖ Email nh·∫Øc nh·ªü ƒë√£ ƒë∆∞·ª£c g·ª≠i:', info.response);
        return info;
    } catch (error) {
        console.error('‚ùå L·ªói khi g·ª≠i email nh·∫Øc nh·ªü:', error);
        throw error;
    }
};
// Kh·ªüi ƒë·ªông l·ªãch g·ª≠i email
const startReminderSchedule = () => {
    // Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt
    if (!process.env.EMAIL || !process.env.EMAIL_PASS || !process.env.RECIPIENT_EMAIL) {
        console.warn('‚ö†Ô∏è Thi·∫øu th√¥ng tin c·∫•u h√¨nh email trong file .env. Ch·ª©c nƒÉng nh·∫Øc nh·ªü s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.');
        return;
    }
    // M·∫∑c ƒë·ªãnh: "0 6 * * *" - 6:00 AM m·ªói ng√†y
    const reminderTime = process.env.REMINDER_TIME || "0 6 * * *";

    try {
        cron.schedule(reminderTime, () => {
            console.log('üîî ƒêang g·ª≠i l·ªùi nh·∫Øc vi·∫øt nh·∫≠t k√Ω...');
            sendJournalReminder();
        });

        console.log(`üìÖ L·ªãch nh·∫Øc nh·ªü vi·∫øt nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p: ${reminderTime}`);
    } catch (error) {
        console.error('‚ùå L·ªói khi thi·∫øt l·∫≠p l·ªãch nh·∫Øc nh·ªü:', error);
    }
};
module.exports = {
    startReminderSchedule,
    sendJournalReminder
}; 